/**
 * Script de prueba para validar la funcionalidad "Comparable por D√≠a"
 * Este script prueba las nuevas funciones implementadas
 */

const { obtenerDatosTraficoConLogicaHistorica } = require('../lib/api');
const { obtenerConfiguracionHistoricaPorSemana, obtenerFormatoSemana } = require('../lib/airtable');
const { obtenerTraficoPorDia } = require('../lib/historical-traffic');

// Configuraci√≥n de prueba
const TIENDA_EJEMPLO = {
  recordId: 'recXXXX', // Reemplazar con un ID real de tienda
  name: 'Tienda de Prueba'
};

async function probarConfiguracionPorDia() {
  console.log('\nüéØ === PRUEBAS DE CONFIGURACI√ìN COMPARABLE POR D√çA ===\n');
  
  try {
    // 1. Probar obtenerFormatoSemana
    console.log('üìÖ 1. Probando obtenerFormatoSemana...');
    const fechaEjemplo = new Date('2025-06-23'); // Lunes
    const semanaFormato = obtenerFormatoSemana(fechaEjemplo);
    console.log(`   Fecha: ${fechaEjemplo.toISOString().split('T')[0]} ‚Üí Semana: ${semanaFormato}`);
    
    // 2. Crear configuraci√≥n de ejemplo por d√≠a
    console.log('\nüîß 2. Simulando configuraci√≥n por d√≠a...');
    const configuracionEjemplo = {
      type: 'comparable_por_dia',
      mapping: {
        '2025-06-23': '2024-06-24', // Lunes 2025 ‚Üí Lunes 2024
        '2025-06-24': '2024-06-25', // Martes 2025 ‚Üí Martes 2024
        '2025-06-25': '2024-06-26', // Mi√©rcoles 2025 ‚Üí Mi√©rcoles 2024
        '2025-06-26': '2024-06-27', // Jueves 2025 ‚Üí Jueves 2024
        '2025-06-27': '2024-06-28', // Viernes 2025 ‚Üí Viernes 2024
        '2025-06-28': '2024-06-29', // S√°bado 2025 ‚Üí S√°bado 2024
        '2025-06-29': '2024-06-30'  // Domingo 2025 ‚Üí Domingo 2024
      }
    };
    
    console.log('   Configuraci√≥n creada:', JSON.stringify(configuracionEjemplo, null, 2));
    
    // 3. Probar funci√≥n obtenerTraficoPorDia
    console.log('\nüìä 3. Probando obtenerTraficoPorDia...');
    const fechaObjetivo = '2025-06-23';
    
    try {
      const resultado = await obtenerTraficoPorDia(
        configuracionEjemplo.mapping,
        TIENDA_EJEMPLO.recordId,
        fechaObjetivo
      );
      
      if (resultado && resultado.esDatoHistorico) {
        console.log('   ‚úÖ obtenerTraficoPorDia exitoso:');
        console.log(`      üìä Horas: ${Object.keys(resultado.horas || {}).length}`);
        console.log(`      üåÖ Ma√±ana: ${resultado.totalMa√±ana?.entradas || 0} entradas`);
        console.log(`      üåÜ Tarde: ${resultado.totalTarde?.entradas || 0} entradas`);
        console.log(`      üìÖ Fecha inicio: ${resultado.fechaInicio}`);
        console.log(`      üìÖ Fecha fin: ${resultado.fechaFin}`);
        console.log(`      üè∑Ô∏è  Semanas referencia: ${resultado.semanasReferencia?.join(', ') || 'N/A'}`);
      } else {
        console.log('   ‚ùå obtenerTraficoPorDia no retorn√≥ datos hist√≥ricos v√°lidos');
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Error en obtenerTraficoPorDia: ${error.message}`);
      console.log('   ‚ÑπÔ∏è Esto es esperado si no hay datos reales para las fechas de referencia');
    }
    
    // 4. Probar funci√≥n principal con configuraci√≥n por d√≠a
    console.log('\nüîÑ 4. Probando obtenerDatosTraficoConLogicaHistorica...');
    
    try {
      const resultado = await obtenerDatosTraficoConLogicaHistorica(
        `dia_${fechaObjetivo}`,
        TIENDA_EJEMPLO.recordId,
        true, // Es hist√≥rica
        fechaObjetivo,
        semanaFormato
      );
      
      if (resultado && 'esDatoHistorico' in resultado && resultado.esDatoHistorico) {
        console.log('   ‚úÖ Funci√≥n principal exitosa:');
        console.log(`      üìä Tipo de datos: ${resultado.esDatoHistorico ? 'Hist√≥rico' : 'Est√°ndar'}`);
        console.log(`      üìä Horas: ${Object.keys(resultado.horas || {}).length}`);
        console.log(`      üéØ Semana objetivo: ${resultado.semanaObjetivo || 'No especificada'}`);
        console.log(`      üìã Semanas referencia: ${resultado.semanasReferencia?.join(', ') || 'No especificadas'}`);
      } else {
        console.log('   ‚ÑπÔ∏è Funci√≥n principal retorn√≥ datos est√°ndar (esperado si no hay configuraci√≥n)');
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è Error en funci√≥n principal: ${error.message}`);
    }
    
    // 5. Comparar con configuraci√≥n por semanas
    console.log('\nüìã 5. Comparando configuraciones por semana vs por d√≠a...');
    
    const configuracionPorSemanas = ['W26 2024', 'W25 2024'];
    console.log(`   Por semanas: ${configuracionPorSemanas.join(', ')}`);
    console.log(`   Por d√≠as: ${Object.keys(configuracionEjemplo.mapping).length} d√≠as mapeados`);
    console.log('   üí° Diferencia: Por semanas = promedio, Por d√≠as = fecha exacta');
    
    console.log('\n‚úÖ === PRUEBAS COMPLETADAS ===');
    console.log('üîç Para probar completamente, necesitas:');
    console.log('   1. Una tienda con configuraci√≥n "Comparable por D√≠a" en Airtable');
    console.log('   2. Datos de tr√°fico reales para las fechas de referencia');
    console.log('   3. Abrir un modal de d√≠a en el frontend y verificar los logs');
    
  } catch (error) {
    console.error('‚ùå Error general en las pruebas:', error);
  }
}

// Funci√≥n para probar los type guards
function probarTypeGuards() {
  console.log('\nüîç === PRUEBAS DE TYPE GUARDS ===\n');
  
  const { isConfiguracionPorDia, isConfiguracionPorSemanas } = require('../lib/airtable');
  
  // Configuraci√≥n por semanas
  const configSemanas = ['W26 2024', 'W25 2024'];
  console.log('üìã Configuraci√≥n por semanas:', configSemanas);
  console.log(`   isConfiguracionPorSemanas: ${isConfiguracionPorSemanas(configSemanas)}`);
  console.log(`   isConfiguracionPorDia: ${isConfiguracionPorDia(configSemanas)}`);
  
  // Configuraci√≥n por d√≠a
  const configDia = {
    type: 'comparable_por_dia',
    mapping: {
      '2025-06-23': '2024-06-24'
    }
  };
  console.log('\nüéØ Configuraci√≥n por d√≠a:', configDia);
  console.log(`   isConfiguracionPorSemanas: ${isConfiguracionPorSemanas(configDia)}`);
  console.log(`   isConfiguracionPorDia: ${isConfiguracionPorDia(configDia)}`);
  
  // Configuraci√≥n inv√°lida
  const configInvalida = { some: 'invalid config' };
  console.log('\n‚ùå Configuraci√≥n inv√°lida:', configInvalida);
  console.log(`   isConfiguracionPorSemanas: ${isConfiguracionPorSemanas(configInvalida)}`);
  console.log(`   isConfiguracionPorDia: ${isConfiguracionPorDia(configInvalida)}`);
}

// Ejecutar pruebas
async function ejecutarPruebas() {
  try {
    probarTypeGuards();
    await probarConfiguracionPorDia();
  } catch (error) {
    console.error('‚ùå Error ejecutando pruebas:', error);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  ejecutarPruebas();
}

module.exports = {
  probarConfiguracionPorDia,
  probarTypeGuards,
  ejecutarPruebas
}; 