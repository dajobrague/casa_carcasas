/**
 * Funciones auxiliares para el manejo de tr√°fico hist√≥rico
 * Estas funciones son un addon para las tiendas hist√≥ricas con semanas de referencia configuradas
 */

import { obtenerDatosTrafico } from './api';
import { DatosTraficoDia } from './utils';

/**
 * Interfaz para los datos de tr√°fico hist√≥rico agregados
 */
export interface TraficoHistoricoAggregado {
  horas: Record<string, { entradas: number; tickets: number; euros: number }>;
  totalMa√±ana: { entradas: number; tickets: number; euros: number };
  totalTarde: { entradas: number; tickets: number; euros: number };
  datosPorDia: {
    [diaSemana: string]: Record<string, { entradas: number; tickets: number; euros: number }>;
  };
  fechaInicio: string;
  fechaFin: string;
  esDatoHistorico: boolean;
  semanasReferencia: string[];
  semanaObjetivo?: string;
}

/**
 * Calcula las fechas de las semanas de referencia del a√±o anterior
 * @param semanasReferencia - Array de semanas en formato "W20 2024"
 * @returns Array de objetos con las fechas de cada semana
 */
export function calcularFechasSemanasReferencia(semanasReferencia: string[]): Array<{
  semana: string;
  fechas: string[];
}> {
  const fechasPorSemana: Array<{ semana: string; fechas: string[] }> = [];

  for (const semanaStr of semanasReferencia) {
    const [weekPart, yearStr] = semanaStr.split(' ');
    const weekNumber = parseInt(weekPart.replace('W', ''));
    const year = parseInt(yearStr);

    if (isNaN(weekNumber) || isNaN(year)) {
      console.warn(`üìÖ Formato de semana inv√°lido: ${semanaStr}`);
      continue;
    }

    // Calcular fecha del lunes de la semana especificada
    const fechaLunes = obtenerLunesDeLaSemana(year, weekNumber);
    
    // Generar todas las fechas de la semana (lunes a domingo)
    const fechasSemana: string[] = [];
    for (let i = 0; i < 7; i++) {
      const fecha = new Date(fechaLunes);
      fecha.setDate(fecha.getDate() + i);
      fechasSemana.push(fecha.toISOString().split('T')[0]);
    }

    fechasPorSemana.push({
      semana: semanaStr,
      fechas: fechasSemana
    });
  }

  return fechasPorSemana;
}

/**
 * Obtiene la fecha del lunes de una semana espec√≠fica
 * @param year - A√±o
 * @param weekNumber - N√∫mero de semana (1-53)
 * @returns Fecha del lunes de esa semana
 */
function obtenerLunesDeLaSemana(year: number, weekNumber: number): Date {
  // Obtener el 4 de enero del a√±o (siempre est√° en la primera semana)
  const enero4 = new Date(year, 0, 4);
  
  // Encontrar el lunes de la primera semana
  const primerLunes = new Date(enero4);
  primerLunes.setDate(enero4.getDate() - enero4.getDay() + 1);
  
  // Calcular el lunes de la semana especificada
  const lunesObjetivo = new Date(primerLunes);
  lunesObjetivo.setDate(primerLunes.getDate() + (weekNumber - 1) * 7);
  
  return lunesObjetivo;
}

/**
 * Agrupa los datos de tr√°fico por d√≠a de la semana
 * @param datosTrafico - Array de datos de tr√°fico diarios
 * @returns Datos agrupados por d√≠a de la semana
 */
export function agruparDatosPorDiaSemana(datosTrafico: Array<{
  fecha: string;
  datos: DatosTraficoDia;
}>): Record<string, Array<Record<string, number>>> {
  const diasSemana = ['lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo'];
  const datosPorDia: Record<string, Array<Record<string, number>>> = {};
  
  // Inicializar estructura
  diasSemana.forEach(dia => {
    datosPorDia[dia] = [];
  });

  // Agrupar datos por d√≠a de la semana
  datosTrafico.forEach(({ fecha, datos }) => {
    const fechaObj = new Date(fecha);
    const diaSemanaIndex = fechaObj.getDay(); // 0 = domingo, 1 = lunes, etc.
    
    // Mapear √≠ndice de d√≠a a nombre
    const diasMap = ['domingo', 'lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado'];
    const diaSemana = diasMap[diaSemanaIndex];
    
    if (datos.horas) {
      datosPorDia[diaSemana].push(datos.horas);
    }
  });

  return datosPorDia;
}

/**
 * Calcula el promedio de tr√°fico por hora para cada d√≠a de la semana
 * @param datosAgrupados - Datos agrupados por d√≠a de la semana
 * @returns Promedios por d√≠a de la semana
 */
export function calcularPromediosPorDiaSemana(
  datosAgrupados: Record<string, Array<Record<string, number>>>
): Record<string, Record<string, number>> {
  const promedios: Record<string, Record<string, number>> = {};

  Object.keys(datosAgrupados).forEach(diaSemana => {
    const datosDelDia = datosAgrupados[diaSemana];
    
    if (datosDelDia.length === 0) {
      promedios[diaSemana] = {};
      return;
    }

    // Obtener todas las horas √∫nicas
    const horasUnicas = new Set<string>();
    datosDelDia.forEach(datos => {
      Object.keys(datos).forEach(hora => horasUnicas.add(hora));
    });

    // Calcular promedio para cada hora
    const promedioHoras: Record<string, number> = {};
    horasUnicas.forEach(hora => {
      const valores = datosDelDia
        .map(datos => datos[hora] || 0)
        .filter(valor => valor > 0); // Solo considerar valores > 0
      
      if (valores.length > 0) {
        promedioHoras[hora] = Math.round(valores.reduce((sum, val) => sum + val, 0) / valores.length);
      }
    });

    promedios[diaSemana] = promedioHoras;
  });

  return promedios;
}

/**
 * Funci√≥n con timeout para evitar llamadas que cuelguen
 */
async function fetchConTimeout(url: string, timeoutMs: number = 10000): Promise<Response> {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);
  
  try {
    const response = await fetch(url, { 
      signal: controller.signal,
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    });
    clearTimeout(timeoutId);
    return response;
  } catch (error) {
    clearTimeout(timeoutId);
    
    // Convertir errores complejos en errores simples
    if (error instanceof Error) {
      if (error.name === 'AbortError') {
        throw new Error('TIMEOUT');
      } else if (error.message.includes('fetch')) {
        throw new Error('NETWORK_ERROR');
      }
      throw new Error(error.message.substring(0, 50));
    }
    
    throw new Error('UNKNOWN_ERROR');
  }
}

/**
 * Obtiene los datos de tr√°fico hist√≥rico para m√∫ltiples fechas
 * @param fechas - Array de fechas en formato YYYY-MM-DD
 * @param storeRecordId - ID de la tienda
 * @returns Promise con los datos de tr√°fico para todas las fechas
 */
export async function obtenerDatosTraficoMultiplesFechas(
  fechas: string[],
  storeRecordId: string
): Promise<Array<{ fecha: string; datos: DatosTraficoDia | null }>> {
  if (fechas.length === 0) {
    return [];
  }
  
  console.log(`üîç Obteniendo tr√°fico para ${fechas.length} fechas (bulk)...`);
  
  try {
    const baseUrl = typeof window !== 'undefined' ? '' : process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    
    // Usar la nueva API bulk que es mucho m√°s r√°pida
    const fechasParam = fechas.join(',');
    const url = `${baseUrl}/api/trafico-bulk?tiendaId=${storeRecordId}&fechas=${encodeURIComponent(fechasParam)}`;
    
    const response = await fetchConTimeout(url, 15000); // timeout m√°s generoso para bulk
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    const data = await response.json();
    
    if (!data.resultados || !Array.isArray(data.resultados)) {
      throw new Error('Formato de respuesta inv√°lido');
    }
    
    // Convertir resultados al formato esperado
    const resultados: Array<{ fecha: string; datos: DatosTraficoDia | null }> = [];
    let exitosos = 0;
    let fallidos = 0;
    
    data.resultados.forEach((resultado: any) => {
      try {
        if (resultado.datos && resultado.datos.entradasPorHora) {
          const datosTraficoDia: DatosTraficoDia = {
            horas: resultado.datos.entradasPorHora,
            totalMa√±ana: 0,
            totalTarde: 0,
            fechaInicio: resultado.fecha,
            fechaFin: resultado.fecha
          };
          
          // Calcular totales de ma√±ana y tarde
          Object.entries(resultado.datos.entradasPorHora).forEach(([hora, entradas]) => {
            const horaNum = parseInt(hora.split(':')[0]);
            const entradasNum = Number(entradas) || 0;
            
            if (!isNaN(horaNum)) {
              if (horaNum < 14) {
                datosTraficoDia.totalMa√±ana += entradasNum;
              } else {
                datosTraficoDia.totalTarde += entradasNum;
              }
            }
          });
          
          resultados.push({ fecha: resultado.fecha, datos: datosTraficoDia });
          exitosos++;
        } else {
          resultados.push({ fecha: resultado.fecha, datos: null });
          fallidos++;
        }
      } catch (parseError) {
        resultados.push({ fecha: resultado.fecha, datos: null });
        fallidos++;
      }
    });
    
    console.log(`üìä Hist√≥rico: ${exitosos}‚úÖ ${fallidos}‚ùå`);
    return resultados;
    
  } catch (error) {
    console.warn(`‚ùå Error en API bulk, fallback a m√©todo individual`);
    
    // Fallback al m√©todo original si el bulk falla
    return obtenerDatosTraficoMultiplesFechasIndividual(fechas, storeRecordId);
  }
}

/**
 * Funci√≥n fallback para obtener datos individualmente si el bulk falla
 */
async function obtenerDatosTraficoMultiplesFechasIndividual(
  fechas: string[],
  storeRecordId: string
): Promise<Array<{ fecha: string; datos: DatosTraficoDia | null }>> {
  const resultados: Array<{ fecha: string; datos: DatosTraficoDia | null }> = [];
  const batchSize = 6;
  let exitosos = 0;
  let fallidos = 0;
  
  for (let i = 0; i < fechas.length; i += batchSize) {
    const batch = fechas.slice(i, i + batchSize);
    
    const promesas = batch.map(async (fecha) => {
      try {
        const baseUrl = typeof window !== 'undefined' ? '' : process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
        const url = `${baseUrl}/api/trafico?tiendaId=${storeRecordId}&fechaInicio=${fecha}&fechaFin=${fecha}`;
        
        const response = await fetchConTimeout(url, 8000);
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data && data.entradasPorHora && typeof data.entradasPorHora === 'object') {
          const datosTraficoDia: DatosTraficoDia = {
            horas: data.entradasPorHora,
            totalMa√±ana: 0,
            totalTarde: 0,
            fechaInicio: fecha,
            fechaFin: fecha
          };
          
          Object.entries(data.entradasPorHora).forEach(([hora, entradas]) => {
            const horaNum = parseInt(hora.split(':')[0]);
            const entradasNum = Number(entradas) || 0;
            
            if (!isNaN(horaNum)) {
              if (horaNum < 14) {
                datosTraficoDia.totalMa√±ana += entradasNum;
              } else {
                datosTraficoDia.totalTarde += entradasNum;
              }
            }
          });
          
          exitosos++;
          return { fecha, datos: datosTraficoDia };
        }
        
        fallidos++;
        return { fecha, datos: null };
        
      } catch (error) {
        fallidos++;
        return { fecha, datos: null };
      }
    });

    const resultadosBatch = await Promise.allSettled(promesas);
    resultadosBatch.forEach((resultado, index) => {
      if (resultado.status === 'fulfilled') {
        resultados.push(resultado.value);
      } else {
        resultados.push({ fecha: batch[index], datos: null });
        fallidos++;
      }
    });
  }
  
  console.log(`üìä Hist√≥rico (individual): ${exitosos}‚úÖ ${fallidos}‚ùå`);
  return resultados;
}

/**
 * Funci√≥n principal para obtener datos de tr√°fico hist√≥rico
 * @param semanasReferencia - Array de semanas en formato "W20 2024"
 * @param storeRecordId - ID de la tienda
 * @param diaObjetivo - D√≠a de la semana objetivo (lunes, martes, etc.)
 * @returns Promise con los datos de tr√°fico hist√≥rico procesados
 */
export async function obtenerTraficoHistorico(
  semanasReferencia: string[],
  storeRecordId: string,
  diaObjetivo: string
): Promise<TraficoHistoricoAggregado | null> {
  try {
    console.log(`üìà Calculando tr√°fico hist√≥rico para ${diaObjetivo} usando semanas:`, semanasReferencia.join(', '));
    
    // 1. Calcular fechas de las semanas de referencia
    const fechasPorSemana = calcularFechasSemanasReferencia(semanasReferencia);
    
    // 2. Obtener todas las fechas
    const todasLasFechas = fechasPorSemana.flatMap(semana => semana.fechas);
    
    // 3. Obtener datos de tr√°fico para todas las fechas
    const datosTrafico = await obtenerDatosTraficoMultiplesFechas(todasLasFechas, storeRecordId);
    
    // 4. Filtrar solo los datos v√°lidos
    const datosValidos = datosTrafico.filter(item => item.datos !== null) as Array<{
      fecha: string;
      datos: DatosTraficoDia;
    }>;
    
    if (datosValidos.length === 0) {
      console.warn('‚ùå No se obtuvieron datos v√°lidos para las fechas especificadas');
      return null;
    }
    
    // 5. Agrupar por d√≠a de la semana
    const datosAgrupados = agruparDatosPorDiaSemana(datosValidos);
    
    // 6. Calcular promedios por d√≠a de la semana
    const promedios = calcularPromediosPorDiaSemana(datosAgrupados);
    
    // 7. Obtener datos espec√≠ficos del d√≠a objetivo
    const datosDelDiaObjetivo = promedios[diaObjetivo.toLowerCase()] || {};
    
    // 8. Calcular totales de ma√±ana y tarde
    const totalMa√±ana = Object.entries(datosDelDiaObjetivo)
      .filter(([hora]) => parseInt(hora.split(':')[0]) < 14)
      .reduce((sum, [, valor]) => sum + valor, 0);
    
    const totalTarde = Object.entries(datosDelDiaObjetivo)
      .filter(([hora]) => parseInt(hora.split(':')[0]) >= 14)
      .reduce((sum, [, valor]) => sum + valor, 0);
    
    // 9. Construir respuesta
    const resultado: TraficoHistoricoAggregado = {
      horas: datosDelDiaObjetivo,
      totalMa√±ana,
      totalTarde,
      datosPorDia: promedios,
      fechaInicio: todasLasFechas[0] || '',
      fechaFin: todasLasFechas[todasLasFechas.length - 1] || '',
      esDatoHistorico: true,
      semanasReferencia
    };
    
    console.log(`‚úÖ Tr√°fico hist√≥rico calculado: ${Object.keys(datosDelDiaObjetivo).length} horas, Total: ${totalMa√±ana + totalTarde}`);
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Error al obtener tr√°fico hist√≥rico:', error instanceof Error ? error.message : 'Error desconocido');
    return null;
  }
}

/**
 * Funci√≥n para procesar datos de tr√°fico hist√≥rico para tiendas NO hist√≥ricas
 * @param storeRecordId - ID de la tienda
 * @param fechaActual - Fecha actual en formato YYYY-MM-DD
 * @param diaObjetivo - D√≠a de la semana objetivo
 * @returns Promise con los datos de tr√°fico de las √∫ltimas 4 semanas
 */
export async function obtenerTraficoNoHistorico(
  storeRecordId: string,
  fechaActual: string,
  diaObjetivo: string
): Promise<TraficoHistoricoAggregado | null> {
  try {
    console.log(`üìä Calculando tr√°fico promedio para ${diaObjetivo} (√∫ltimas 4 semanas)`);
    
    // Generar fechas de las √∫ltimas 4 semanas del mismo d√≠a
    const fechas: string[] = [];
    const fechaBase = new Date(fechaActual);
    
    for (let i = 1; i <= 4; i++) {
      const fecha = new Date(fechaBase);
      fecha.setDate(fecha.getDate() - (i * 7)); // Retroceder 1, 2, 3, 4 semanas
      fechas.push(fecha.toISOString().split('T')[0]);
    }
    
    // Obtener datos de tr√°fico para estas fechas
    const datosTrafico = await obtenerDatosTraficoMultiplesFechas(fechas, storeRecordId);
    
    // Filtrar datos v√°lidos
    const datosValidos = datosTrafico.filter(item => item.datos !== null) as Array<{
      fecha: string;
      datos: DatosTraficoDia;
    }>;
    
    if (datosValidos.length === 0) {
      return null;
    }
    
    // Agrupar y calcular promedios
    const datosAgrupados = agruparDatosPorDiaSemana(datosValidos);
    const promedios = calcularPromediosPorDiaSemana(datosAgrupados);
    
    // Obtener datos del d√≠a objetivo
    const datosDelDiaObjetivo = promedios[diaObjetivo.toLowerCase()] || {};
    
    // Calcular totales
    const totalMa√±ana = Object.entries(datosDelDiaObjetivo)
      .filter(([hora]) => parseInt(hora.split(':')[0]) < 14)
      .reduce((sum, [, valor]) => sum + valor, 0);
    
    const totalTarde = Object.entries(datosDelDiaObjetivo)
      .filter(([hora]) => parseInt(hora.split(':')[0]) >= 14)
      .reduce((sum, [, valor]) => sum + valor, 0);

    console.log(`‚úÖ Tr√°fico promedio calculado: ${datosValidos.length} d√≠as v√°lidos`);

    return {
      horas: datosDelDiaObjetivo,
      totalMa√±ana,
      totalTarde,
      datosPorDia: promedios,
      fechaInicio: fechas[fechas.length - 1] || '',
      fechaFin: fechas[0] || '',
      esDatoHistorico: false,
      semanasReferencia: [],
      semanaObjetivo: diaObjetivo
    };
    
  } catch (error) {
    console.error('‚ùå Error al obtener tr√°fico no hist√≥rico:', error instanceof Error ? error.message : 'Error desconocido');
    return null;
  }
}

/**
 * Funci√≥n para obtener el d√≠a de la semana en espa√±ol
 * @param fecha - Fecha en formato YYYY-MM-DD
 * @returns Nombre del d√≠a en espa√±ol
 */
export function obtenerDiaSemana(fecha: string): string {
  const fechaObj = new Date(fecha);
  const diasSemana = ['domingo', 'lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado'];
  return diasSemana[fechaObj.getDay()];
} 